= 输入格式 =

输入格式是Tab分隔的“关键词”-“页码”的对，例如
{{{
软件的定义	1-4
基于构件组装	1-5
磨损	1-5
软件的特征	1-5
定制软件	1-5
故障曲线	1-7
硬件故障曲线	1-7
浴缸曲线	1-7
软件故障曲线	1-8
软件的分类	1-10
}}}
这里显示的时候会自动将水平制表符替换成空格，输入的时候要求是水平制表符。

= 配置文件 =

输入文件由“设置.js”决定，格式应该看得懂中文的都看得懂怎么设置：
{{{
module.exports = {
  '词条': '词条.txt',
  '读音': '读音.txt',
  '排序': '排序.js',
  '输出': '输出.tex',
  '分隔符': ', ',
  '上页边距': '0.8cm',
  '下页边距': '0.8cm',
  '左页边距': '0.8cm',
  '右页边距': '0.8cm',
  '字体': '新宋体',
  '词条列宽度': '12em',
  '页码列宽度': '8em',
  '每页行数': 56,
  '课程名称': '软件工程',
  '任课教师': '姓名',
  '考试时间': '2012年6月8日 8:00-10:00',
  '考试地点': '东上院10_'
};
}}}
词条为上文所述的输入文件；读音用来保存输入的读音设置，避免再次排版时的麻烦；输出是标音排序后输出到的文件（输出是JSON格式的）；分隔符是如果某个关键词对应多个页码，用这个分隔符分割，建议使用“, ”；页边距要求带单位，格式同TeX要求的格式；字体要求是等宽字体，建议新宋体；词条列宽度要求大于最长词条列可能出现的最长的单词的长度；页码列宽度要求大于页码列可能出现的最长的页码的长度，每页的行数自己调整，以保证不出现最后一页就几行的情况；课程名称、任课教师、考试时间、考试地点会最后被写在索引最开头的位置，可以根据需要填写。每页行数为数字，其他均为字符串。

= 标音 =

之后首先运行order进行标音和排序：
{{{
node order.js
}}}
对于多音字和字库之外的字及符号会询问读音，具体规则如下。

遇到多音字程序会询问字音，如：
{{{
  多[重]度
  1: chong  2: zhong
  >
}}}
此时输入1表示chong这个音。
输入时“1”可以省略，故可以直接输入回车。

再如：
{{{
  管理人[员]的误区
  1: yuan  2: yun
  >
}}}
此时输入1表示yuan这个音，但是由于这个字的另一个音在本文中不会出现，输入01表示以后对所有的“员”字标“yuan”的读音；同样地“1”可以省略。

再如：
{{{
  [α]测试
  >
}}}
此时没有可供选择的选项，需要自己输入读音。
若输入的是一般汉字的读音可以直接输入；
若输入特殊的序列用于排序用半角单引号开头，如此处输入
{{{
  > ' a
}}}

此外，这个标音的程序有一个问题，就是如果一个输入中有两个组成相同但读音不同的词条（如“重chong载”和“重zhong载”），程序将无法识别，需要手动在输入文件中处理，输入文件中两个词的格式如下：
{{{
  $<chong$重>$载	13
  $<zhong$重>$载	120
}}}
需要注意的是注音要写在文字的前面，其中的特例包括
韵母“ü”排入“u:”，“üe”排入“ue:”，“ȇ”排入“eh”。

标音之后运行mtex进行排版
{{{
node mtex
}}}

= 排版 =

最后是用xelatex生成pdf：
{{{
xelatex 输出.tex
}}}
其中“输出.tex”替换成你在设置中填写的输出文件名。

最后会得到和那个输出文件名同名的pdf文件。